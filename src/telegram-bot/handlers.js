/**
 * Telegram bot event handlers
 * Contains all handlers for bot commands and interactions
 */

const firebaseConfig = require('../config/firebase');
const fileProcessing = require('../utils/fileProcessing');
const logger = require('../utils/logger');
const openaiUtil = require('../utils/openaiUtil');
const videoProcessing = require('../utils/videoProcessing');

// Firestore collection names
const USERS_COLLECTION = 'users';
const CVS_COLLECTION = 'cvs';

// For Node.js versions that don't have global fetch
let fetch;
try {
  fetch = global.fetch;
} catch (error) {
  // If global fetch is not available, import node-fetch
  fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
}

// Utility function for escaping Markdown characters
const escapeMarkdown = (text) => {
  if (!text) return '';
  // Escape special Markdown characters: _ * [ ] ( ) ~ ` > # + - = | { } . !
  return text.replace(/([_*[\]()~`>#+-=|{}\.!])/g, '\\$1');
};

// Variable for storing last interview questions by user
const lastInterviewQuestions = {};

/**
 * Register a new user in Firestore
 * @param {Object} user - Telegram user object
 * @returns {Promise<void>}
 */
const registerUser = async (user) => {
  try {
    const db = firebaseConfig.getFirestore();
    const userRef = db.collection(USERS_COLLECTION).doc(user.id.toString());
    
    // Check if user already exists
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      // Create new user
      await userRef.set({
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name || '',
        username: user.username || '',
        language: user.language_code || 'en',
        createdAt: new Date(),
        lastActive: new Date(),
      });
      logger.info(`New user registered: ${user.id}`);
    } else {
      // Update last active timestamp
      await userRef.update({
        lastActive: new Date(),
      });
    }
  } catch (error) {
    logger.error(`Error registering user: ${error.message}`);
    throw error;
  }
};

/**
 * Start command handler
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object
 */
const handleStart = async (bot, msg) => {
  try {
    const chatId = msg.chat.id;
    const user = msg.from;
    
    // Register user
    await registerUser(user);
    
    // Welcome message with rich formatting
    const welcomeMessage = `
üåü *¬°Bienvenido a tu Asistente de Carrera AI!* üåü

Soy tu asistente profesional para ayudarte en tu b√∫squeda de empleo. Puedo ofrecerte:

‚úÖ *Revisi√≥n de CV* - An√°lisis detallado de tu curr√≠culum, fortalezas y √°reas de mejora
‚úÖ *Simulaci√≥n de Entrevista* - Pr√°ctica de entrevistas con feedback personalizado

Para comenzar, necesito analizar tu CV primero.
¬°Env√≠ame tu curr√≠culum para obtener un an√°lisis detallado!
    `;
    
    // Create inline keyboard with only CV review option initially
    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìã Revisi√≥n de CV', callback_data: 'service_cv_review' }
          ]
        ]
      }
    };
    
    // Send welcome message with options
    await bot.sendMessage(chatId, welcomeMessage, options);
  } catch (error) {
    logger.error(`Error in start handler: ${error.message}`);
    bot.sendMessage(msg.chat.id, 'Lo siento, hubo un error al iniciar el bot. Por favor intenta de nuevo m√°s tarde.');
  }
};

/**
 * Help command handler
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object
 */
const handleHelp = async (bot, msg) => {
  try {
    const chatId = msg.chat.id;
    
    const helpMessage = `
*Bot de Revisi√≥n de CV - Ayuda*

*C√≥mo usar este bot:*
1. Env√≠a tu CV/Curr√≠culum en uno de los formatos compatibles
2. Espera a que se complete el an√°lisis (normalmente tarda 10-30 segundos)
3. Revisa los comentarios detallados y sugerencias

*Formatos compatibles:*
‚Ä¢ PDF (.pdf)
‚Ä¢ Microsoft Word (.doc, .docx)
‚Ä¢ Texto (.txt)
‚Ä¢ Formato de Texto Enriquecido (.rtf)
‚Ä¢ Im√°genes (.jpg, .png)

*Comandos disponibles:*
/start - Inicializar el bot
/help - Mostrar esta informaci√≥n de ayuda
/about - Informaci√≥n sobre este bot
/status - Verificar el estado del an√°lisis de tu CV
/feedback - Enviar comentarios sobre el an√°lisis

*Consejos para obtener mejores resultados:*
‚Ä¢ Aseg√∫rate de que tu documento sea claro y legible
‚Ä¢ El formato PDF generalmente da los mejores resultados
‚Ä¢ No env√≠es m√∫ltiples versiones del mismo CV

¬øNecesitas m√°s ayuda? Cont√°ctanos en support@example.com
    `;
    
    await bot.sendMessage(chatId, helpMessage, {
      parse_mode: 'Markdown',
    });
  } catch (error) {
    logger.error(`Error in help handler: ${error.message}`);
    bot.sendMessage(msg.chat.id, 'Lo siento, hubo un error al mostrar la ayuda. Por favor intenta de nuevo m√°s tarde.');
  }
};

/**
 * About command handler
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object
 */
const handleAbout = async (bot, msg) => {
  try {
    const chatId = msg.chat.id;
    
    const aboutMessage = `
*Acerca del Bot de Revisi√≥n de CV*

El Bot de Revisi√≥n de CV es una herramienta avanzada de an√°lisis de curr√≠culum que ayuda a los buscadores de empleo a mejorar sus CVs utilizando inteligencia artificial y est√°ndares profesionales de RRHH.

*Caracter√≠sticas:*
‚Ä¢ An√°lisis en profundidad de la estructura del CV
‚Ä¢ Extracci√≥n de habilidades y experiencia
‚Ä¢ Recomendaciones espec√≠ficas por industria
‚Ä¢ Verificaci√≥n de compatibilidad con ATS (Sistema de Seguimiento de Candidatos)
‚Ä¢ Sugerencias de gram√°tica y redacci√≥n

*Tecnolog√≠a:*
Construido utilizando un sistema h√≠brido con Node.js y Python, aprovechando NLP (Procesamiento de Lenguaje Natural) y algoritmos de aprendizaje autom√°tico entrenados en miles de curr√≠culums exitosos.

*Versi√≥n:* 1.0.0
*Creado por:* Tu Empresa

*Pol√≠tica de privacidad:*
Nos preocupamos por tu privacidad. Todos los CVs cargados se almacenan de forma segura y solo se utilizan para proporcionarte an√°lisis. Nunca compartimos tus datos con terceros.

Para m√°s informaci√≥n visita: example.com
    `;
    
    await bot.sendMessage(chatId, aboutMessage, {
      parse_mode: 'Markdown',
    });
  } catch (error) {
    logger.error(`Error in about handler: ${error.message}`);
    bot.sendMessage(msg.chat.id, 'Lo siento, hubo un error al mostrar la informaci√≥n. Por favor intenta de nuevo m√°s tarde.');
  }
};

/**
 * Status command handler
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object
 */
const handleStatus = async (bot, msg) => {
  try {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    
    const db = firebaseConfig.getFirestore();
    const cvsRef = db.collection(CVS_COLLECTION)
      .where('userId', '==', userId)
      .orderBy('createdAt', 'desc')
      .limit(1);
    
    const snapshot = await cvsRef.get();
    
    if (snapshot.empty) {
      await bot.sendMessage(chatId, 'A√∫n no has enviado ning√∫n CV. ¬°Env√≠ame tu CV para comenzar!');
      return;
    }
    
    const cvDoc = snapshot.docs[0];
    const cvData = cvDoc.data();
    
    const statusMessage = `
*Estado del An√°lisis de CV*

*Archivo:* ${cvData.fileName || 'Desconocido'}
*Enviado:* ${cvData.createdAt.toDate().toLocaleString()}
*Estado:* ${cvData.status === 'completed' ? 'Completado' : 'Procesando'}

${cvData.status === 'completed' ? 'Tu an√°lisis est√° listo! Escribe /results para verlo.' : 'Tu CV todav√≠a est√° siendo analizado. Por favor espera un momento.'}
    `;
    
    await bot.sendMessage(chatId, statusMessage, {
      parse_mode: 'Markdown',
    });
  } catch (error) {
    logger.error(`Error in status handler: ${error.message}`);
    bot.sendMessage(msg.chat.id, 'Lo siento, hubo un error al verificar tu estado. Por favor intenta de nuevo m√°s tarde.');
  }
};

/**
 * Document message handler
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object
 */
const handleDocument = async (bot, msg) => {
  try {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const document = msg.document;
    
    // Validate file size
    const maxSizeInBytes = 20 * 1024 * 1024; // 20 MB
    if (document.file_size > maxSizeInBytes) {
      await bot.sendMessage(chatId, 'Lo siento, el archivo es demasiado grande. El tama√±o m√°ximo de archivo es 20 MB.');
      return;
    }
    
    // Send "processing" message
    const processingMessage = await bot.sendMessage(chatId, 'He recibido tu CV! El procesamiento ha comenzado... ‚è≥');
    
    // Try to register user if Firebase is configured
    try {
      if (process.env.FIREBASE_PROJECT_ID) {
        await registerUser(msg.from);
      }
    } catch (error) {
      logger.warn(`No se pudo registrar al usuario: ${error.message}`);
    }
    
    // Get file from Telegram
    const fileInfo = await bot.getFile(document.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${fileInfo.file_path}`;
    
    // Download file
    const response = await fetch(fileUrl);
    const fileBuffer = await response.arrayBuffer();
    
    // For testing, always use mock analysis
    logger.info('Using mock CV analysis for demonstration');
    const result = {
      fileUrl: fileUrl,
      extractedText: "Texto CV simulado para demostraci√≥n",
      analysis: {
        score: 7,
        summary: `Este es un an√°lisis simulado de "${document.file_name}" para fines de demostraci√≥n. El an√°lisis real estar√° disponible cuando el servicio Python est√© en funcionamiento.`,
        basicInfo: {
          name: msg.from.first_name + " " + (msg.from.last_name || ""),
          email: "ejemplo@ejemplo.com",
          phone: "+1234567890",
          location: "Ubicaci√≥n de Ejemplo",
          linkedin: "linkedin.com/in/ejemplo",
          completeness: 80,
          suggestions: "Esta es una sugerencia simulada para fines de demostraci√≥n."
        },
        experience: {
          years: "3-5",
          roles: ["Desarrollador de Software", "Desarrollador Web"],
          quality: 7,
          suggestions: "Esta es una sugerencia de experiencia simulada para fines de demostraci√≥n."
        },
        skills: ["JavaScript", "React", "Node.js", "HTML", "CSS", "MongoDB", "Express"],
        missingSkills: ["TypeScript", "GraphQL", "Docker"],
        skillsSuggestions: "Considera agregar m√°s habilidades relevantes para los puestos que buscas.",
        recommendations: [
          "Esta es una recomendaci√≥n simulada para fines de demostraci√≥n.",
          "Tu CV se beneficiar√≠a de logros m√°s cuantificables.",
          "Considera personalizar tu CV para cada solicitud de empleo."
        ]
      }
    };
    
    // Enhance analysis with OpenAI if available
    if (process.env.OPENAI_API_KEY) {
      try {
        logger.info('Mejorando an√°lisis con OpenAI...');
        await bot.editMessageText('Procesando CV y mejorando el an√°lisis con IA... ‚è≥', {
          chat_id: chatId,
          message_id: processingMessage.message_id,
        });
        
        result.analysis = await openaiUtil.enhanceCVAnalysis(result.analysis);
        logger.info('An√°lisis mejorado con OpenAI');
      } catch (error) {
        logger.error(`Error al mejorar an√°lisis con OpenAI: ${error.message}`);
      }
    }
      
    // Add a small delay to simulate processing time
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Try to store analysis in Firebase if available
    try {
      if (!firebaseConfig.usingMockImplementation) {
        const db = firebaseConfig.getFirestore();
        const cvRef = db.collection(CVS_COLLECTION).doc();
        
        await cvRef.set({
          id: cvRef.id,
          userId: userId,
          fileName: document.file_name,
          fileSize: document.file_size,
          mimeType: document.mime_type,
          status: 'completed',
          fileUrl: result.fileUrl,
          analysis: result.analysis,
          createdAt: new Date(),
          updatedAt: new Date(),
        });
      }
    } catch (error) {
      logger.warn(`No se pudo almacenar el an√°lisis en Firebase: ${error.message}`);
    }
    
    // Update processing message
    await bot.editMessageText('CV procesado con √©xito! üéâ', {
      chat_id: chatId,
      message_id: processingMessage.message_id,
    });
    
    // Format and send analysis results
    await sendAnalysisResults(bot, chatId, result.analysis);
  } catch (error) {
    logger.error(`Error processing document: ${error.message}`);
    bot.sendMessage(msg.chat.id, 'Lo siento, hubo un error al procesar tu CV. Por favor intenta de nuevo m√°s tarde.');
  }
};

/**
 * Format and send CV analysis results
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Number} chatId - Chat ID
 * @param {Object} analysis - Analysis results
 */
const sendAnalysisResults = async (bot, chatId, analysis) => {
  try {
    // Safely format fields
    const safeName = escapeMarkdown(analysis.basicInfo.name || 'No detectado');
    const safeSummary = escapeMarkdown(analysis.summary);
    
    // Mensaje √∫nico con toda la informaci√≥n relevante
    const analysisMessage = `
*üìä An√°lisis de CV: ${analysis.score}/10* ${getScoreEmoji(analysis.score)}

*Resumen:*
${safeSummary}

*Fortalezas:*
‚Ä¢ ${escapeMarkdown(analysis.skills.slice(0, 3).join(', '))}
‚Ä¢ Experiencia: ${escapeMarkdown(analysis.experience.years || 'No detectado')}
‚Ä¢ Roles destacados: ${analysis.experience.roles ? escapeMarkdown(analysis.experience.roles[0]) : 'No detectado'}

*√Åreas de mejora:*
‚Ä¢ ${escapeMarkdown(analysis.missingSkills.slice(0, 2).join(', '))}
‚Ä¢ ${escapeMarkdown(analysis.recommendations[0])}

*¬øQu√© te gustar√≠a revisar en detalle?*
    `;
    
    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üë§ Datos Personales', callback_data: 'personal_info' },
            { text: 'üíº Experiencia', callback_data: 'experience_detail' },
          ],
          [
            { text: 'üîß Habilidades', callback_data: 'skills_detail' },
            { text: 'üìã ATS Compatibilidad', callback_data: 'ats_check' },
          ],
          [
            { text: 'üìä Informe Completo', callback_data: 'report_full' },
            { text: '‚úèÔ∏è Consejos de Mejora', callback_data: 'improvement_tips' },
          ],
          [
            { text: 'üé• Simulaci√≥n de Entrevista', callback_data: 'service_interview' },
          ],
        ],
      },
    };
    
    await bot.sendMessage(chatId, analysisMessage, options);
  } catch (error) {
    logger.error(`Error al enviar los resultados del an√°lisis: ${error.message}`);
    bot.sendMessage(chatId, 'Lo siento, hubo un error al mostrar los resultados del an√°lisis. Por favor intenta de nuevo m√°s tarde.');
  }
};

/**
 * Get emoji based on score
 * @param {Number} score - Score out of 10
 * @returns {String} - Emoji representation
 */
const getScoreEmoji = (score) => {
  if (score >= 9) return 'üèÜ';
  if (score >= 7) return 'üòÄ';
  if (score >= 5) return 'üòê';
  if (score >= 3) return 'üòï';
  return 'üò¢';
};

/**
 * Callback query handler
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} callbackQuery - Callback query object
 */
const handleCallbackQuery = async (bot, callbackQuery) => {
  try {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    // Acknowledge the callback query
    await bot.answerCallbackQuery(callbackQuery.id);
    
    switch (data) {
      case 'report_full':
        await bot.sendMessage(chatId, 'Generando informe PDF completo de tu an√°lisis de CV... Esto puede tardar un momento.');
        
        try {
          // Get latest CV analysis for user
          const userId = callbackQuery.from.id.toString();
          let analysis = null;
          
          if (!firebaseConfig.usingMockImplementation && firebaseConfig.getFirestore()) {
            // Try to get analysis from Firebase
            const db = firebaseConfig.getFirestore();
            const cvsRef = db.collection(CVS_COLLECTION)
              .where('userId', '==', userId)
              .orderBy('createdAt', 'desc')
              .limit(1);
            
            const snapshot = await cvsRef.get();
            
            if (!snapshot.empty) {
              const cvDoc = snapshot.docs[0];
              const cvData = cvDoc.data();
              analysis = cvData.analysis;
            }
          }
          
          // If no analysis found or using mock implementation, generate a fake response
          if (!analysis) {
            // Simulate PDF generation
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Send mock report message
            await bot.sendMessage(chatId, `
*‚úÖ Tu informe PDF est√° listo*

Lamentablemente, no podemos generar un PDF real en este entorno de prueba.

En un entorno de producci√≥n, recibir√≠as un archivo PDF descargable con tu an√°lisis completo.

Si necesitas ayuda adicional, usa los comandos o botones disponibles para obtener m√°s informaci√≥n.
            `, { parse_mode: 'Markdown' });
            
            return;
          }
          
          // Generate PDF report
          const reportResult = await generateReportPDF(analysis, userId);
          
          if (reportResult.success) {
            // Send success message with download link
            await bot.sendMessage(chatId, `
*‚úÖ Tu informe PDF est√° listo*

Hemos generado un informe detallado de tu CV en formato PDF. Puedes descargarlo usando el enlace a continuaci√≥n.

[Descargar Informe PDF](${reportResult.pdfUrl})

Este informe contiene un an√°lisis completo de tu CV, incluyendo todas las secciones analizadas y recomendaciones personalizadas.
            `, { 
              parse_mode: 'Markdown',
              disable_web_page_preview: true
            });
          } else {
            throw new Error(reportResult.error || 'Error desconocido');
          }
        } catch (error) {
          logger.error(`Error al generar informe PDF: ${error.message}`);
          await bot.sendMessage(chatId, 'Lo siento, hubo un problema al generar tu informe PDF. Por favor intenta nuevamente m√°s tarde.');
        }
        break;
        
      case 'improvement_tips':
        try {
          await bot.sendMessage(chatId, 'Generando consejos de mejora personalizados con IA...');
          
          // Si OpenAI est√° disponible, generamos consejos mejorados
          if (process.env.OPENAI_API_KEY) {
            const prompt = `
            Genera 5 consejos profesionales y espec√≠ficos para mejorar un CV.
            Los consejos deben ser pr√°cticos, accionables y detallados.
            Enf√≥cate en mejorar la estructura, contenido, palabras clave, formato y presentaci√≥n del CV.
            Cada consejo debe incluir el qu√©, el por qu√© y el c√≥mo.
            El formato debe ser en espa√±ol y con vi√±etas.
            NO uses caracteres especiales de Markdown como asteriscos, guiones bajos, corchetes o par√©ntesis sin escaparlos.
            `;
            
            try {
              let enhancedTips = await openaiUtil.generateImprovedText(prompt, {
                max_tokens: 400,
                temperature: 0.7
              });
              
              // Asegurarse de que el texto generado est√© correctamente escapado para Markdown
              enhancedTips = escapeMarkdown(enhancedTips);
              
              // Envolvemos cada consejo en su propio bloque para mejorar la legibilidad
              const formattedTips = enhancedTips
                .split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0)
                .join('\n\n');
              
              await bot.sendMessage(chatId, `
*Consejos de Mejora Personalizados* ‚úèÔ∏è

${formattedTips}

¬øTe gustar√≠a obtener consejos sobre alguna secci√≥n espec√≠fica?
‚Ä¢ /skills\\_tips - Consejos para la secci√≥n de habilidades
‚Ä¢ /experience\\_tips - Consejos para la secci√≥n de experiencia
‚Ä¢ /education\\_tips - Consejos para la secci√≥n de educaci√≥n
              `, { parse_mode: 'Markdown' });
            } catch (error) {
              logger.error(`Error generando consejos con IA: ${error.message}`);
              // Si hay un error con OpenAI, usar consejos predefinidos como respaldo
              throw new Error('No se pudo generar consejos personalizados');
            }
          } else {
            // Consejos predefinidos si OpenAI no est√° disponible
            await bot.sendMessage(chatId, `
*Principales consejos de mejora para tu CV*

1. *Usa verbos de acci√≥n* al comienzo de los puntos para captar la atenci√≥n del reclutador. Verbos como "Implement√©", "Desarroll√©", "Lider√©" o "Gener√©" son m√°s impactantes que descripciones pasivas.

2. *Cuantifica tus logros* con n√∫meros y porcentajes espec√≠ficos. En lugar de decir "Aument√© las ventas", di "Aument√© las ventas en un 35% en 6 meses, generando $250,000 en ingresos adicionales".

3. *Personaliza tu CV* para cada solicitud de empleo, incorporando palabras clave espec√≠ficas de la descripci√≥n del puesto. Esto mejora la compatibilidad con sistemas ATS y muestra tu relevancia para el rol.

4. *Mant√©n un formato consistente* en todo el documento, usando la misma fuente, tama√±o y estilo para secciones similares. La consistencia visual hace que tu CV sea m√°s f√°cil de leer y profesional.

5. *Crea una secci√≥n de logros destacados* al inicio de tu CV, que resuma tus 3-4 contribuciones m√°s impresionantes. Esto captura inmediatamente la atenci√≥n del reclutador y destaca tu valor.
              `, { parse_mode: 'Markdown' });
          }
        } catch (error) {
          logger.error(`Error generando consejos de mejora: ${error.message}`);
          // Si ocurre cualquier error, mostrar consejos predefinidos como respaldo
          await bot.sendMessage(chatId, `
*Principales consejos de mejora para tu CV*

1. *Usa verbos de acci√≥n* al comienzo de los puntos para captar la atenci√≥n del reclutador.

2. *Cuantifica tus logros* con n√∫meros y porcentajes espec√≠ficos para demostrar tu impacto.

3. *Personaliza tu CV* para cada solicitud de empleo, incorporando palabras clave relevantes.

4. *Mant√©n un formato consistente* en todo el documento para una mejor legibilidad.

5. *Enfoca tu CV en logros* m√°s que en responsabilidades para destacar tu valor.
              `, { parse_mode: 'Markdown' });
        }
        break;
        
      case 'ats_check':
        try {
          await bot.sendMessage(chatId, 'Analizando la compatibilidad de tu CV con sistemas ATS...');
          
          // Si OpenAI est√° disponible, generamos un an√°lisis ATS mejorado
          if (process.env.OPENAI_API_KEY) {
            const prompt = `
            Genera un an√°lisis detallado de compatibilidad ATS (Sistema de Seguimiento de Candidatos) para un CV.
            Incluye:
            1. Una puntuaci√≥n de compatibilidad ATS de 0-100%
            2. Una lista de 3-4 problemas comunes encontrados en CVs
            3. Una lista de 3-4 sugerencias espec√≠ficas para mejorar la compatibilidad con ATS
            4. Un breve p√°rrafo sobre la importancia de la optimizaci√≥n para ATS
            
            El formato debe ser claro, con secciones bien definidas, y en espa√±ol.
            NO uses caracteres especiales de Markdown como asteriscos, guiones bajos, corchetes o par√©ntesis sin escaparlos.
            `;
            
            try {
              let enhancedATSAnalysis = await openaiUtil.generateImprovedText(prompt, {
                max_tokens: 400,
                temperature: 0.7
              });
              
              // Asegurarse de que el texto generado est√© correctamente escapado para Markdown
              enhancedATSAnalysis = escapeMarkdown(enhancedATSAnalysis);
              
              // Formatear el an√°lisis para mejorar legibilidad
              const formattedATSAnalysis = enhancedATSAnalysis
                .split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0)
                .join('\n\n');
              
              await bot.sendMessage(chatId, `
*An√°lisis de Compatibilidad ATS* üìã

${formattedATSAnalysis}
              `, { parse_mode: 'Markdown' });
              
              // A√±adir un mensaje con bot√≥n para m√°s informaci√≥n
              await bot.sendMessage(chatId, '¬øQuieres saber m√°s sobre c√≥mo optimizar tu CV para sistemas ATS?', {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üìö M√°s informaci√≥n sobre ATS', callback_data: 'ats_info' }]
                  ]
                }
              });
            } catch (error) {
              logger.error(`Error generando an√°lisis ATS con IA: ${error.message}`);
              // Si hay un error con OpenAI, usar an√°lisis predefinido como respaldo
              throw new Error('No se pudo generar an√°lisis ATS personalizado');
            }
          } else {
            // An√°lisis ATS predefinido si OpenAI no est√° disponible
            await bot.sendMessage(chatId, `
*Verificaci√≥n de compatibilidad ATS*

Tu CV es *75% compatible con ATS*.

*Problemas encontrados:*
‚Ä¢ El formato complejo puede no analizarse correctamente por los sistemas ATS
‚Ä¢ Faltan algunas palabras clave relevantes para tu industria
‚Ä¢ El formato de la informaci√≥n de contacto podr√≠a optimizarse mejor
‚Ä¢ Algunos encabezados de secciones no son est√°ndar

*Sugerencias:*
‚Ä¢ Usa un dise√±o m√°s simple de una sola columna sin tablas ni cuadros
‚Ä¢ Agrega m√°s palabras clave espec√≠ficas de la industria y del puesto
‚Ä¢ Aseg√∫rate de que los detalles de contacto est√©n en formato de texto plano
‚Ä¢ Utiliza encabezados de secci√≥n est√°ndar como "Experiencia", "Educaci√≥n" y "Habilidades"

*Importancia del ATS:*
M√°s del 75% de los empleadores utilizan sistemas ATS para filtrar candidatos. Un CV optimizado para ATS aumenta significativamente tus posibilidades de pasar este primer filtro autom√°tico.
            `, { parse_mode: 'Markdown' });
          }
        } catch (error) {
          logger.error(`Error generando an√°lisis ATS: ${error.message}`);
          // Si ocurre cualquier error, mostrar an√°lisis predefinido como respaldo
          await bot.sendMessage(chatId, `
*Verificaci√≥n de compatibilidad ATS*

Tu CV es *75% compatible con ATS*.

*Problemas encontrados:*
‚Ä¢ El formato complejo puede no analizarse correctamente
‚Ä¢ Faltan algunas palabras clave relevantes
‚Ä¢ Los encabezados de secciones podr√≠an optimizarse

*Sugerencias:*
‚Ä¢ Usa un formato simple de una sola columna
‚Ä¢ Incluye m√°s t√©rminos de la descripci√≥n del puesto
‚Ä¢ Utiliza encabezados est√°ndar para cada secci√≥n

*Recomendaci√≥n:*
Optimizar tu CV para ATS es esencial ya que el 75% de las solicitudes son filtradas antes de que un humano las vea.
          `, { parse_mode: 'Markdown' });
        }
        break;
        
      case 'job_compare':
        try {
          // Guardamos el estado del usuario para esperar la descripci√≥n del trabajo
          // Aqu√≠ deber√≠amos tener una gesti√≥n de estados de usuario, pero para simplificar vamos a simular
          
          const instructionMessage = await bot.sendMessage(chatId, `
*Comparaci√≥n de CV con Oferta de Trabajo* üíº

Para comparar tu CV con una oferta de trabajo espec√≠fica, por favor:

1. Copia el texto completo de la descripci√≥n del trabajo
2. Env√≠amelo como mensaje directo
3. Analizar√© la compatibilidad entre tu CV y los requisitos del puesto

Por favor, env√≠a la descripci√≥n del trabajo completa en tu pr√≥ximo mensaje.
          `, { parse_mode: 'Markdown' });
          
          // Simulaci√≥n de respuesta para prop√≥sitos de demostraci√≥n
          setTimeout(async () => {
            try {
              await bot.sendMessage(chatId, `
*Nota:* En este momento, la funci√≥n de comparaci√≥n con empleo est√° en modo de demostraci√≥n. 

Para usar esta funci√≥n en un entorno real:
1. Enviar√≠as la descripci√≥n del trabajo
2. El sistema analizar√≠a tu CV contra esa descripci√≥n
3. Recibir√≠as un informe de compatibilidad personalizado

Esta funci√≥n estar√° completamente disponible en la pr√≥xima actualizaci√≥n.
            `, { parse_mode: 'Markdown' });
            } catch (error) {
              logger.error(`Error enviando mensaje de seguimiento: ${error.message}`);
            }
          }, 5000);
        } catch (error) {
          logger.error(`Error en comparaci√≥n de empleo: ${error.message}`);
          await bot.sendMessage(chatId, 'Lo siento, hubo un problema al iniciar la comparaci√≥n con empleo. Por favor intenta nuevamente m√°s tarde.');
        }
        break;

      // A√±adir un nuevo caso para el bot√≥n de informaci√≥n sobre ATS
      case 'ats_info':
        try {
          if (process.env.OPENAI_API_KEY) {
            const prompt = `
            Genera una gu√≠a informativa sobre sistemas ATS (Applicant Tracking Systems) para alguien que est√° buscando trabajo.
            Incluye:
            1. Qu√© son los sistemas ATS y c√≥mo funcionan
            2. Por qu√© son importantes para los buscadores de empleo
            3. 5 consejos principales para optimizar un CV para ATS
            4. Errores comunes a evitar
            
            La informaci√≥n debe ser educativa, pr√°ctica y en espa√±ol.
            NO uses caracteres especiales de Markdown como asteriscos, guiones bajos, corchetes o par√©ntesis sin escaparlos.
            `;
            
            try {
              let atsInfo = await openaiUtil.generateImprovedText(prompt, {
                max_tokens: 500,
                temperature: 0.7
              });
              
              // Asegurarse de que el texto generado est√© correctamente escapado para Markdown
              atsInfo = escapeMarkdown(atsInfo);
              
              // Formatear el an√°lisis para mejorar legibilidad
              const formattedATSInfo = atsInfo
                .split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0)
                .join('\n\n');
              
              await bot.sendMessage(chatId, `
*Gu√≠a Completa sobre Sistemas ATS* üìö

${formattedATSInfo}
            `, { parse_mode: 'Markdown' });
            } catch (error) {
              logger.error(`Error generando informaci√≥n ATS con IA: ${error.message}`);
              // Si hay error con OpenAI, usar respuesta predefinida
              throw new Error('No se pudo generar informaci√≥n ATS personalizada');
            }
          } else {
            await bot.sendMessage(chatId, `
*¬øQu√© son los Sistemas ATS?* üìö

Los sistemas ATS (Applicant Tracking Systems) son software que las empresas utilizan para gestionar el proceso de reclutamiento, filtrar candidatos y organizar informaci√≥n de aplicaciones.

*¬øC√≥mo funcionan?*
‚Ä¢ Escanean CVs en busca de palabras clave espec√≠ficas
‚Ä¢ Filtran candidatos que no cumplen criterios m√≠nimos
‚Ä¢ Clasifican y punt√∫an las aplicaciones seg√∫n su relevancia
‚Ä¢ Permiten a los reclutadores buscar en su base de datos

*Consejos para optimizar tu CV para ATS:*
1. Usa palabras clave de la descripci√≥n del puesto
2. Mant√©n un formato simple sin elementos gr√°ficos complejos
3. Evita encabezados o pies de p√°gina con informaci√≥n importante
4. Utiliza nombres de secci√≥n est√°ndar
5. Env√≠a tu CV en formato .docx o .pdf (texto seleccionable)

*Errores comunes a evitar:*
‚Ä¢ Usar tablas, columnas o elementos visuales complejos
‚Ä¢ Incluir informaci√≥n en im√°genes o gr√°ficos
‚Ä¢ Usar fuentes o formatos poco convencionales
‚Ä¢ Emplear abreviaturas no est√°ndar
            `, { parse_mode: 'Markdown' });
          }
        } catch (error) {
          logger.error(`Error generando informaci√≥n ATS: ${error.message}`);
          // Si ocurre cualquier error, mostrar informaci√≥n predefinida
          await bot.sendMessage(chatId, `
*Gu√≠a r√°pida sobre ATS*

Los sistemas ATS son software que filtran autom√°ticamente CVs antes de que un reclutador los vea.

*Consejos clave:*
‚Ä¢ Incluye palabras clave exactas de la descripci√≥n del puesto
‚Ä¢ Usa un formato simple y compatible con ATS
‚Ä¢ Evita gr√°ficos, tablas e im√°genes complejas
‚Ä¢ Mant√©n secciones est√°ndar con t√≠tulos claros

*Formatos recomendados:* 
PDF simple o Word (.docx)
          `, { parse_mode: 'Markdown' });
        }
        break;
        
      // A√±adir nuevos casos para los botones adicionales
      case 'personal_info':
        try {
          const userId = callbackQuery.from.id.toString();
          
          // Simulaci√≥n de recuperaci√≥n de datos
          const personalInfo = {
            name: callbackQuery.from.first_name + " " + (callbackQuery.from.last_name || ""),
            email: "ejemplo@ejemplo.com",
            phone: "+1234567890",
            location: "Ubicaci√≥n de Ejemplo",
            linkedin: "linkedin.com/in/ejemplo",
            completeness: 80,
            suggestions: "Aseg√∫rate de incluir un correo profesional y enlaces a tus perfiles profesionales. Una foto profesional tambi√©n puede ser beneficiosa dependiendo de tu industria."
          };
          
          const personalInfoMessage = `
*üë§ Datos Personales*

*Nombre:* ${escapeMarkdown(personalInfo.name || 'No detectado')}
*Email:* ${escapeMarkdown(personalInfo.email || 'No detectado')}
*Tel√©fono:* ${escapeMarkdown(personalInfo.phone || 'No detectado')}
*Ubicaci√≥n:* ${escapeMarkdown(personalInfo.location || 'No detectado')}
*LinkedIn:* ${escapeMarkdown(personalInfo.linkedin || 'No detectado')}

*Completitud:* ${personalInfo.completeness}%

*Sugerencias:*
${escapeMarkdown(personalInfo.suggestions)}
          `;
          
          await bot.sendMessage(chatId, personalInfoMessage, { parse_mode: 'Markdown' });
        } catch (error) {
          logger.error(`Error mostrando datos personales: ${error.message}`);
          await bot.sendMessage(chatId, 'Lo siento, hubo un problema al recuperar los datos personales.');
        }
        break;

      case 'experience_detail':
        try {
          const userId = callbackQuery.from.id.toString();
          
          // Simulamos datos de experiencia
          const experienceDetails = {
            years: "3-5",
            roles: ["Desarrollador de Software", "Desarrollador Web"],
            quality: 7,
            suggestions: "A√±ade n√∫meros concretos y resultados medibles a tus logros. Utiliza verbos de acci√≥n al inicio de cada punto y enf√≥cate en tus contribuciones espec√≠ficas en lugar de solo listar responsabilidades.",
            timeline: [
              {
                position: "Desarrollador Senior",
                company: "Empresa Ejemplo",
                duration: "2020 - Presente",
                highlights: ["Lider√≥ equipo de desarrollo frontend", "Implement√≥ CI/CD reduciendo tiempo de despliegue en 40%"]
              },
              {
                position: "Desarrollador Web",
                company: "Startup Innovadora",
                duration: "2018 - 2020",
                highlights: ["Desarroll√≥ aplicaci√≥n React con 10k usuarios", "Optimiz√≥ rendimiento del sitio web en 30%"]
              }
            ]
          };
          
          // Formato de mensaje m√°s detallado para experiencia
          let experienceMessage = `
*üíº Experiencia Profesional*

*A√±os de experiencia:* ${escapeMarkdown(experienceDetails.years)}
*Calidad del contenido:* ${experienceDetails.quality}/10

*Historial laboral:*
`;
          
          // A√±adir timeline de experiencia
          experienceDetails.timeline.forEach(job => {
            experienceMessage += `
üîπ *${escapeMarkdown(job.position)}* - ${escapeMarkdown(job.company)}
     ${escapeMarkdown(job.duration)}
`;
            
            // A√±adir highlights si existen
            if (job.highlights && job.highlights.length > 0) {
              job.highlights.forEach(highlight => {
                experienceMessage += `   ‚Ä¢ ${escapeMarkdown(highlight)}\n`;
              });
            }
          });
          
          // A√±adir sugerencias de mejora
          experienceMessage += `
*Sugerencias de mejora:*
${escapeMarkdown(experienceDetails.suggestions)}
          `;
          
          await bot.sendMessage(chatId, experienceMessage, { parse_mode: 'Markdown' });
        } catch (error) {
          logger.error(`Error mostrando detalles de experiencia: ${error.message}`);
          await bot.sendMessage(chatId, 'Lo siento, hubo un problema al recuperar los detalles de experiencia.');
        }
        break;

      case 'skills_detail':
        try {
          const userId = callbackQuery.from.id.toString();
          
          // Simulamos datos de habilidades m√°s detallados
          const skillsDetails = {
            technical: [
              { name: "JavaScript", level: "Avanzado", relevance: "Alta" },
              { name: "React", level: "Avanzado", relevance: "Alta" },
              { name: "Node.js", level: "Intermedio", relevance: "Alta" },
              { name: "HTML/CSS", level: "Avanzado", relevance: "Media" },
              { name: "MongoDB", level: "B√°sico", relevance: "Media" }
            ],
            soft: [
              "Trabajo en equipo",
              "Comunicaci√≥n",
              "Resoluci√≥n de problemas"
            ],
            missing: [
              { name: "TypeScript", importance: "Alta" },
              { name: "GraphQL", importance: "Media" },
              { name: "Docker", importance: "Media" }
            ],
            suggestions: "Considera agrupar tus habilidades por categor√≠as y destacar aquellas m√°s relevantes para los puestos que buscas. A√±ade indicadores de nivel de competencia para las habilidades t√©cnicas clave."
          };
          
          // Crear mensaje de habilidades detallado
          let skillsMessage = `
*üîß An√°lisis Detallado de Habilidades*

*Habilidades t√©cnicas principales:*
`;
          
          // A√±adir habilidades t√©cnicas
          skillsDetails.technical.forEach(skill => {
            skillsMessage += `‚Ä¢ ${escapeMarkdown(skill.name)} - ${escapeMarkdown(skill.level)}\n`;
          });
          
          // A√±adir habilidades blandas
          skillsMessage += `
*Habilidades blandas detectadas:*
`;
          skillsDetails.soft.forEach(skill => {
            skillsMessage += `‚Ä¢ ${escapeMarkdown(skill)}\n`;
          });
          
          // A√±adir habilidades faltantes recomendadas
          skillsMessage += `
*Habilidades recomendadas para a√±adir:*
`;
          skillsDetails.missing.forEach(skill => {
            skillsMessage += `‚Ä¢ ${escapeMarkdown(skill.name)} (Importancia: ${escapeMarkdown(skill.importance)})\n`;
          });
          
          // A√±adir sugerencias
          skillsMessage += `
*Sugerencias de mejora:*
${escapeMarkdown(skillsDetails.suggestions)}
          `;
          
          await bot.sendMessage(chatId, skillsMessage, { parse_mode: 'Markdown' });
        } catch (error) {
          logger.error(`Error mostrando an√°lisis de habilidades: ${error.message}`);
          await bot.sendMessage(chatId, 'Lo siento, hubo un problema al recuperar el an√°lisis detallado de habilidades.');
        }
        break;
        
      // Agregar nuevos casos para manejar los servicios
      case 'service_cv_review':
        // Mostrar la informaci√≥n sobre el servicio de revisi√≥n de CV
        const cvReviewMessage = `
*üìã Servicio de Revisi√≥n de CV*

Este servicio analiza tu curr√≠culum y proporciona feedback detallado para ayudarte a destacar en el proceso de selecci√≥n.

*Formatos compatibles:* PDF, DOCX, DOC, TXT, RTF, JPG, PNG

*C√≥mo funciona:*
1. Env√≠a tu CV en uno de los formatos compatibles
2. Nuestro sistema analizar√° tu documento
3. Recibir√°s un an√°lisis detallado con recomendaciones personalizadas

¬°Env√≠a tu CV ahora para comenzar!
        `;
        
        await bot.sendMessage(chatId, cvReviewMessage, { parse_mode: 'Markdown' });
        break;

      case 'service_interview':
        try {
          // Verificar si el usuario ya tiene un CV analizado
          const userId = callbackQuery.from.id.toString();
          let userHasCV = false;
          
          if (process.env.FIREBASE_PROJECT_ID && !firebaseConfig.usingMockImplementation) {
            const db = firebaseConfig.getFirestore();
            const cvsRef = db.collection(CVS_COLLECTION)
              .where('userId', '==', userId)
              .limit(1);
              
            const snapshot = await cvsRef.get();
            userHasCV = !snapshot.empty;
          }
          
          // Si el usuario no ha enviado un CV, pedirle que primero env√≠e su CV
          if (!userHasCV) {
            const needCVMessage = `
*‚ö†Ô∏è Primero necesitamos analizar tu CV*

Para acceder a la simulaci√≥n de entrevista, primero debes enviar tu CV para an√°lisis.

Una vez que hayamos analizado tu CV, podr√°s acceder a la simulaci√≥n de entrevista personalizada.
            `;
            
            const cvFirstOptions = {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üìã Enviar mi CV ahora', callback_data: 'service_cv_review' }
                  ]
                ]
              }
            };
            
            await bot.sendMessage(chatId, needCVMessage, cvFirstOptions);
            break;
          }
          
          // Determinar si estamos en modo real o demo
          const isRealAnalysisAvailable = process.env.OPENAI_API_KEY ? true : false;
          
          // Mostrar la informaci√≥n sobre el servicio de simulaci√≥n de entrevista
          const interviewMessage = `
*üé• Simulaci√≥n de Entrevista Virtual*${!isRealAnalysisAvailable ? ' [DEMO]' : ''}

Este servicio te ayuda a prepararte para entrevistas reales mediante simulaciones con IA y feedback personalizado.

*C√≥mo funciona:*
1. Selecciona el tipo de puesto para el que quieres prepararte
2. Recibir√°s una pregunta de entrevista com√∫n para ese rol
3. Graba un video con tu respuesta y env√≠alo
4. ${isRealAnalysisAvailable ? 'Nuestra IA transcribir√° y analizar√° tu respuesta para darte feedback personalizado' : 'Recibir√°s feedback gen√©rico para demostrar la funcionalidad'}

${!isRealAnalysisAvailable ? 
`*Nota importante:* Este es un modo de demostraci√≥n. Actualmente no analizamos realmente el contenido de tu video.` : 
`*Funcionalidades activas:*
‚Ä¢ Transcripci√≥n del audio de tu video con IA
‚Ä¢ An√°lisis del contenido de tu respuesta
‚Ä¢ Feedback personalizado sobre comunicaci√≥n verbal
‚Ä¢ Sugerencias de mejora espec√≠ficas`}

¬øListo para ${isRealAnalysisAvailable ? 'practicar' : 'probar la demostraci√≥n'}?
          `;
          
          // Crear teclado con opciones de puestos de trabajo
          const jobOptions = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üíª Desarrollador', callback_data: 'interview_dev' },
                  { text: 'üìä Marketing', callback_data: 'interview_marketing' }
                ],
                [
                  { text: 'üì± Dise√±ador UX/UI', callback_data: 'interview_design' },
                  { text: 'üìà Ventas', callback_data: 'interview_sales' }
                ],
                [
                  { text: 'üë®‚Äçüíº Gerente de Proyecto', callback_data: 'interview_pm' },
                  { text: 'üîô Volver', callback_data: 'back_to_start' }
                ]
              ]
            }
          };
          
          await bot.sendMessage(chatId, interviewMessage, jobOptions);
        } catch (error) {
          logger.error(`Error al procesar solicitud de entrevista: ${error.message}`);
          await bot.sendMessage(chatId, 'Lo siento, hubo un problema al acceder a la simulaci√≥n de entrevista. Por favor intenta nuevamente m√°s tarde.');
        }
        break;

      case 'back_to_start':
        try {
          // Volver al mensaje principal pero verificando si el usuario ya ha enviado un CV
          const backToStartMessage = `
*¬øCon qu√© te gustar√≠a que te ayude hoy?*

Selecciona una de las opciones para comenzar:
          `;
          
          // Verificar si el usuario ya tiene un CV analizado
          const userId = callbackQuery.from.id.toString();
          let userHasCV = false;
          
          if (process.env.FIREBASE_PROJECT_ID && !firebaseConfig.usingMockImplementation) {
            const db = firebaseConfig.getFirestore();
            const cvsRef = db.collection(CVS_COLLECTION)
              .where('userId', '==', userId)
              .limit(1);
              
            const snapshot = await cvsRef.get();
            userHasCV = !snapshot.empty;
          }
          
          let startOptions;
          
          if (userHasCV) {
            // Si el usuario ya tiene un CV, mostrar ambas opciones
            startOptions = {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üìã Revisi√≥n de CV', callback_data: 'service_cv_review' },
                    { text: 'üé• Simulaci√≥n de Entrevista', callback_data: 'service_interview' }
                  ]
                ]
              }
            };
          } else {
            // Si el usuario no tiene un CV, mostrar solo la opci√≥n de revisi√≥n de CV
            startOptions = {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üìã Revisi√≥n de CV', callback_data: 'service_cv_review' }
                  ]
                ]
              }
            };
          }
          
          await bot.sendMessage(chatId, backToStartMessage, startOptions);
        } catch (error) {
          logger.error(`Error handling back_to_start: ${error.message}`);
          
          // En caso de error, mostrar solo la opci√≥n de CV review por seguridad
          const startOptions = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üìã Revisi√≥n de CV', callback_data: 'service_cv_review' }
                ]
              ]
            }
          };
          
          await bot.sendMessage(chatId, '*¬øCon qu√© te gustar√≠a que te ayude hoy?*', startOptions);
        }
        break;
        
      // Casos para los diferentes tipos de entrevista
      case 'interview_dev':
      case 'interview_marketing':
      case 'interview_design':
      case 'interview_sales':
      case 'interview_pm':
        try {
          // Obtener tipo de entrevista seleccionado
          const interviewType = data.replace('interview_', '');
          
          // Almacenar la selecci√≥n del usuario
          logger.info(`Usuario ${callbackQuery.from.id} seleccion√≥ entrevista tipo: ${interviewType}`);
          
          // Generar pregunta seg√∫n el tipo de entrevista
          const question = await generateInterviewQuestion(interviewType);
          
          // Almacenar la pregunta para este usuario
          lastInterviewQuestions[callbackQuery.from.id.toString()] = {
            type: interviewType,
            question: question,
            timestamp: Date.now(),
            callbackData: data
          };
          
          // T√≠tulo del trabajo
          const jobTitle = getJobTitle(interviewType);
          
          // Determinar si estamos en modo completo o demo
          const isRealAnalysisAvailable = process.env.OPENAI_API_KEY ? true : false;
          
          // Modo de an√°lisis
          const analysisMode = isRealAnalysisAvailable 
            ? 'Tu respuesta ser√° transcrita y analizada con IA.' 
            : '[MODO DEMO] Esta es una demostraci√≥n. El feedback ser√° gen√©rico, no basado en tu respuesta real.';
          
          // Mensaje con la pregunta de entrevista
          const questionMessage = `
*Pregunta de Entrevista: ${jobTitle}* üé§

${question}

*Instrucciones:*
1. Graba un video respondiendo a esta pregunta (m√°ximo 2 minutos)
2. Env√≠a el video a este chat
3. ${isRealAnalysisAvailable ? 'El sistema transcribir√° tu respuesta y te dar√° feedback personalizado' : 'Recibir√°s feedback gen√©rico (modo demo)'}

${analysisMode}

üëâ Cuando est√©s listo, graba y env√≠a tu video.
          `;
          
          // Bot√≥n para solicitar nueva pregunta
          const newQuestionButton = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üîÑ Nueva Pregunta', callback_data: `interview_${interviewType}` },
                  { text: 'üîô Volver', callback_data: 'service_interview' }
                ]
              ]
            }
          };
          
          await bot.sendMessage(chatId, questionMessage, newQuestionButton);
        } catch (error) {
          logger.error(`Error generando pregunta de entrevista: ${error.message}`);
          await bot.sendMessage(chatId, 'Lo siento, hubo un problema al generar la pregunta de entrevista. Por favor intenta nuevamente.');
        }
        break;
        
      default:
        logger.warn(`Unknown callback query: ${data}`);
        break;
    }
  } catch (error) {
    logger.error(`Error handling callback query: ${error.message}`);
    bot.sendMessage(callbackQuery.message.chat.id, 'Lo siento, hubo un error al procesar tu solicitud. Por favor intenta de nuevo m√°s tarde.');
  }
};

// Add a new function to generate PDF report
const generateReportPDF = async (analysis, userId) => {
  try {
    logger.info(`Generando informe PDF para usuario ${userId}`);
    
    // En un entorno real, aqu√≠ generar√≠amos un PDF
    // Por ahora, simulamos un retraso y devolvemos una URL falsa
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    return {
      success: true,
      pdfUrl: `https://example.com/reports/${userId}-${Date.now()}.pdf`
    };
  } catch (error) {
    logger.error(`Error al generar informe PDF: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * Obtener el t√≠tulo del trabajo basado en el tipo de entrevista
 * @param {string} type - Tipo de entrevista
 * @returns {string} - T√≠tulo del trabajo
 */
const getJobTitle = (type) => {
  switch (type) {
    case 'dev':
      return 'Desarrollador de Software';
    case 'marketing':
      return 'Especialista en Marketing';
    case 'design':
      return 'Dise√±ador UX/UI';
    case 'sales':
      return 'Representante de Ventas';
    case 'pm':
      return 'Gerente de Proyecto';
    default:
      return 'Profesional';
  }
};

/**
 * Generar pregunta de entrevista basada en el tipo de trabajo
 * @param {string} type - Tipo de entrevista
 * @returns {Promise<string>} - Pregunta de entrevista
 */
const generateInterviewQuestion = async (type) => {
  try {
    // Si OpenAI est√° disponible, generamos preguntas personalizadas
    if (process.env.OPENAI_API_KEY) {
      const jobTitle = getJobTitle(type);
      
      const prompt = `
      Genera una pregunta de entrevista desafiante y realista para un candidato a ${jobTitle}.
      La pregunta debe ser:
      1. Relevante para el puesto espec√≠fico
      2. Orientada a evaluar habilidades clave para esta posici√≥n
      3. Una pregunta que requiera una respuesta elaborada (no de s√≠/no)
      4. Formulada de manera clara y profesional
      5. Espec√≠fica para el contexto de trabajo del puesto

      Contexto espec√≠fico seg√∫n el puesto:
      ${type === 'dev' ? '- Enf√≥cate en habilidades t√©cnicas, resoluci√≥n de problemas y trabajo en equipo' : ''}
      ${type === 'marketing' ? '- Enf√≥cate en estrategia digital, an√°lisis de m√©tricas y creatividad' : ''}
      ${type === 'design' ? '- Enf√≥cate en procesos de dise√±o, experiencia de usuario y herramientas de dise√±o' : ''}
      ${type === 'sales' ? '- Enf√≥cate en habilidades de negociaci√≥n, manejo de objeciones y cierre de ventas' : ''}
      ${type === 'pm' ? '- Enf√≥cate en gesti√≥n de stakeholders, priorizaci√≥n y resoluci√≥n de conflictos' : ''}
      
      Proporciona solo la pregunta, sin explicaciones ni contexto adicional.
      La pregunta debe estar en espa√±ol.
      `;
      
      const question = await openaiUtil.generateImprovedText(prompt, {
        max_tokens: 150,
        temperature: 0.8
      });
      
      return escapeMarkdown(question.trim());
    } else {
      // Si no hay OpenAI, usamos preguntas predefinidas
      return getDefaultQuestion(type);
    }
  } catch (error) {
    logger.error(`Error generando pregunta de entrevista: ${error.message}`);
    return getDefaultQuestion(type);
  }
};

/**
 * Obtener pregunta predeterminada basada en el tipo de trabajo
 * @param {string} type - Tipo de entrevista
 * @returns {string} - Pregunta de entrevista predeterminada
 */
const getDefaultQuestion = (type) => {
  const questions = {
    dev: '¬øPuedes describir un proyecto t√©cnico dif√≠cil en el que hayas trabajado y c√≥mo superaste los desaf√≠os que enfrentaste?',
    marketing: '¬øC√≥mo medir√≠as el √©xito de una campa√±a de marketing y qu√© m√©tricas considerar√≠as m√°s importantes?',
    design: '¬øPuedes explicar tu proceso de dise√±o desde la investigaci√≥n de usuarios hasta la implementaci√≥n final?',
    sales: '¬øC√≥mo manejas el rechazo y las objeciones de los clientes durante el proceso de venta?',
    pm: '¬øC√≥mo priorizar√≠as tareas en un proyecto con plazos ajustados y recursos limitados?'
  };
  
  return questions[type] || '¬øCu√°les consideras que son tus principales fortalezas y √°reas de mejora profesionales?';
};

/**
 * Handle video messages
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object
 */
const handleVideo = async (bot, msg) => {
  try {
    const chatId = msg.chat.id;
    const user = msg.from;
    const videoInfo = msg.video;
    
    // Register user
    await registerUser(user);
    
    // Verificar si el usuario ya tiene un CV analizado
    const userId = user.id.toString();
    let userHasCV = false;
    
    if (process.env.FIREBASE_PROJECT_ID && !firebaseConfig.usingMockImplementation) {
      const db = firebaseConfig.getFirestore();
      const cvsRef = db.collection(CVS_COLLECTION)
        .where('userId', '==', userId)
        .limit(1);
        
      const snapshot = await cvsRef.get();
      userHasCV = !snapshot.empty;
    }
    
    // Si el usuario no ha enviado un CV, pedirle que primero env√≠e su CV
    if (!userHasCV) {
      await bot.sendMessage(
        chatId,
        "‚ö†Ô∏è Para acceder a la simulaci√≥n de entrevista, primero debes enviar tu CV para an√°lisis. Una vez que hayamos analizado tu CV, podr√°s acceder a esta funcionalidad.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã Enviar mi CV ahora', callback_data: 'service_cv_review' }]
            ]
          }
        }
      );
      return;
    }
    
    // Check if there is a question associated with this user
    if (!lastInterviewQuestions[user.id]) {
      await bot.sendMessage(
        chatId,
        "‚ö†Ô∏è Por favor, primero selecciona un tipo de entrevista para recibir una pregunta. Luego podr√°s enviar tu respuesta en video.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ Ir a Simulaci√≥n de Entrevista', callback_data: 'service_interview' }]
            ]
          }
        }
      );
      return;
    }
    
    // Check file size - limit to 20MB
    if (videoInfo.file_size > 20 * 1024 * 1024) {
      await bot.sendMessage(
        chatId,
        "‚ö†Ô∏è El video es demasiado grande. Por favor, env√≠a un video de menos de 20MB.",
        { parse_mode: 'Markdown' }
      );
      return;
    }
    
    // Get the interview question
    const question = lastInterviewQuestions[user.id].question;
    const interviewType = lastInterviewQuestions[user.id].type;
    
    // Send a processing message
    const processingMsg = await bot.sendMessage(
      chatId,
      "üîÑ Procesando tu respuesta en video...\n\nEsto puede tomar un momento mientras:\n1. Descargamos tu video\n2. Extraemos el audio\n3. Transcribimos tu respuesta\n4. Analizamos el contenido",
      { parse_mode: 'Markdown' }
    );
    
    // Get file info
    const fileId = videoInfo.file_id;
    const fileLink = await bot.getFileLink(fileId);
    
    // Determine if we're using a mock implementation
    const usingMockImplementation = firebaseConfig.usingMockImplementation;
    
    // Variables for the analysis flow
    let transcription = null;
    let analysis = null;
    let errorOccurred = false;
    
    try {
      // Process the video file to extract audio
      const audioBuffer = await videoProcessing.processVideoFromUrl(fileLink);
      logger.info(`Audio extra√≠do exitosamente del video (${audioBuffer.length} bytes)`);

      // Check if we have OpenAI configured to do real transcription
      if (process.env.OPENAI_API_KEY) {
        // Use OpenAI to transcribe the audio
        transcription = await openaiUtil.transcribeAudio(audioBuffer);
        
        if (transcription) {
          logger.info(`Video transcrito exitosamente (${transcription.length} caracteres)`);
          
          // Analyze the transcription
          analysis = await openaiUtil.analyzeInterviewResponse(transcription, question);
        } else {
          errorOccurred = true;
          logger.error("Error al transcribir el audio");
        }
      } else {
        errorOccurred = true;
        logger.warn("OpenAI API no configurada, usando an√°lisis de demostraci√≥n");
      }
    } catch (error) {
      errorOccurred = true;
      logger.error(`Error al procesar el video: ${error.message}`);
    }
    
    // If we encountered any error or don't have OpenAI API key, use demo feedback
    if (errorOccurred || !analysis) {
      if (errorOccurred) {
        logger.info("Usando an√°lisis de demostraci√≥n debido a error");
      } else {
        logger.info("Usando an√°lisis de demostraci√≥n (configuraci√≥n del sistema)");
      }
      
      // Generate demo feedback
      analysis = openaiUtil.generateMockInterviewAnalysis(question);
      
      // Add demo transcription if we don't have a real one
      if (!transcription) {
        transcription = "Esto es una transcripci√≥n de demostraci√≥n. En el modo real, aqu√≠ ver√≠as la transcripci√≥n exacta de tu respuesta en video.";
      }
    }
    
    // Store the analysis in Firebase if we're not using mock implementations
    if (!usingMockImplementation) {
      try {
        const db = firebaseConfig.getFirestore();
        const interviewRef = db.collection('interviews').doc();
        await interviewRef.set({
          userId: user.id.toString(),
          question,
          interviewType,
          transcription,
          analysis,
          timestamp: new Date()
        });
        logger.info(`An√°lisis de entrevista guardado en Firebase para el usuario ${user.id}`);
      } catch (error) {
        logger.error(`Error al guardar an√°lisis en Firebase: ${error.message}`);
      }
    }
    
    // Update processing message
    await bot.editMessageText(
      "‚úÖ ¬°Procesamiento completado! Aqu√≠ est√° el an√°lisis de tu respuesta.",
      {
        chat_id: chatId,
        message_id: processingMsg.message_id
      }
    );
    
    // Send transcription
    await bot.sendMessage(
      chatId,
      `*üìù Transcripci√≥n de tu respuesta:*\n\n${escapeMarkdown(transcription)}${errorOccurred ? '\n\n_Nota: Esta es una transcripci√≥n simulada para demostraci√≥n._' : ''}`,
      { parse_mode: 'Markdown' }
    );
    
    // Send feedback
    await sendInterviewFeedback(bot, chatId, analysis);
    
    // Send options for next steps
    await bot.sendMessage(
      chatId,
      "¬øQu√© te gustar√≠a hacer ahora?",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ Nueva pregunta del mismo tipo', callback_data: lastInterviewQuestions[user.id].callbackData },
              { text: 'üë®‚Äçüíº Cambiar tipo de entrevista', callback_data: 'service_interview' }
            ],
            [
              { text: 'üè† Men√∫ principal', callback_data: 'back_to_start' }
            ]
          ]
        }
      }
    );
    
  } catch (error) {
    logger.error(`Error en handleVideo: ${error.message}`);
    bot.sendMessage(
      msg.chat.id,
      "Lo siento, ocurri√≥ un error al procesar tu video. Por favor, intenta de nuevo m√°s tarde.",
      { parse_mode: 'Markdown' }
    );
  }
};

/**
 * Enviar feedback de entrevista al usuario
 * @param {TelegramBot} bot - Instancia del bot de Telegram
 * @param {Number} chatId - ID del chat
 * @param {Object} analysis - Objeto con an√°lisis de la entrevista
 * @returns {Promise<void>}
 */
const sendInterviewFeedback = async (bot, chatId, analysis) => {
  try {
    // Verificar si estamos usando OpenAI o demos
    const isRealAnalysis = !!(analysis.summary && analysis.strengths && analysis.weaknesses);
    
    // Emoji seg√∫n puntaje
    const emoji = getInterviewScoreEmoji(analysis.score);
    
    // Formatear fortalezas si existen
    const strengthsText = analysis.strengths 
      ? analysis.strengths.map(s => `‚Ä¢ ${escapeMarkdown(s)}`).join('\n')
      : '';
    
    // Formatear √°reas de mejora si existen
    const weaknessesText = analysis.weaknesses 
      ? analysis.weaknesses.map(w => `‚Ä¢ ${escapeMarkdown(w)}`).join('\n')
      : '';
    
    // Formatear sugerencias si existen
    const suggestionsText = analysis.suggestions 
      ? analysis.suggestions.map(s => `‚Ä¢ ${escapeMarkdown(s)}`).join('\n')
      : '';
    
    // Mensaje con an√°lisis detallado
    const feedbackMessage = `
*üìä Evaluaci√≥n de Entrevista* ${emoji}

*Puntuaci√≥n:* ${analysis.score}/10

*Resumen:*
${escapeMarkdown(analysis.summary)}

*Fortalezas:*
${strengthsText}

*√Åreas de mejora:*
${weaknessesText}

*Sugerencias espec√≠ficas:*
${suggestionsText}
    `;
    
    await bot.sendMessage(chatId, feedbackMessage, { parse_mode: 'Markdown' });
  } catch (error) {
    logger.error(`Error enviando feedback de entrevista: ${error.message}`);
    
    // Si hay error, enviamos un mensaje gen√©rico
    await bot.sendMessage(
      chatId, 
      '*üìä An√°lisis de Entrevista*\n\nTu respuesta ha sido registrada, pero hubo un problema al generar el an√°lisis detallado.',
      { parse_mode: 'Markdown' }
    );
  }
};

/**
 * Obtener emoji seg√∫n la puntuaci√≥n de la entrevista
 * @param {Number} score - Puntuaci√≥n del 1 al 10
 * @returns {String} - Emoji correspondiente
 */
const getInterviewScoreEmoji = (score) => {
  if (score >= 9) return 'üåü';
  if (score >= 7) return '‚ú®';
  if (score >= 5) return 'üëç';
  if (score >= 3) return 'üî®';
  return 'üìö';
};

/**
 * Generar feedback de demostraci√≥n usando OpenAI
 * @returns {Promise<Object>} - Objeto con feedback gen√©rico para la demo
 */
const generateDemoFeedback = async () => {
  try {
    const contentPrompt = `
    Genera un feedback gen√©rico para una demostraci√≥n de entrevista de trabajo.
    Debe quedar CLARO que es un feedback de DEMOSTRACI√ìN y no basado en el an√°lisis real de una respuesta.
    
    El feedback debe incluir:
    1. Una clara indicaci√≥n de que este es un feedback simulado para demostraci√≥n
    2. Consejos generales sobre c√≥mo responder preguntas de entrevista
    3. Recomendaciones est√°ndar para mejorar las respuestas
    
    Escribe en espa√±ol y en un tono profesional pero amable.
    `;
    
    const contentFeedback = await openaiUtil.generateImprovedText(contentPrompt, {
      max_tokens: 300,
      temperature: 0.7
    });
    
    const bodyLanguagePrompt = `
    Genera recomendaciones generales sobre lenguaje corporal y comunicaci√≥n no verbal para entrevistas de trabajo.
    Debe quedar CLARO que estas son recomendaciones generales para una DEMOSTRACI√ìN y no basadas en el an√°lisis real de un video.
    
    Incluye consejos sobre:
    1. Postura y gestos
    2. Contacto visual
    3. Expresiones faciales
    4. Tono de voz y ritmo
    
    Escribe en espa√±ol y en formato de lista para facilitar la lectura.
    `;
    
    const bodyLanguageFeedback = await openaiUtil.generateImprovedText(bodyLanguagePrompt, {
      max_tokens: 250,
      temperature: 0.7
    });
    
    const overallPrompt = `
    Genera un breve p√°rrafo para una DEMOSTRACI√ìN de entrevista que explique claramente que:
    1. Este es un an√°lisis simulado para mostrar c√≥mo funcionar√≠a la herramienta
    2. En una versi√≥n completa, se analizar√≠a realmente el contenido del video
    3. Este feedback no est√° basado en ninguna respuesta real del usuario
    
    Escribe en espa√±ol, de forma clara y directa.
    `;
    
    const overallFeedback = await openaiUtil.generateImprovedText(overallPrompt, {
      max_tokens: 150,
      temperature: 0.7
    });
    
    return {
      content: escapeMarkdown(contentFeedback),
      bodyLanguage: escapeMarkdown(bodyLanguageFeedback),
      overall: escapeMarkdown(overallFeedback),
      score: 8, // Puntuaci√≥n fija para demostraci√≥n
      isDemo: true
    };
  } catch (error) {
    logger.error(`Error generando feedback con OpenAI: ${error.message}`);
    throw error;
  }
};

/**
 * Obtener feedback predeterminado para entrevistas
 * @returns {Object} - Objeto con feedback detallado
 */
const getDefaultFeedback = () => {
  return {
    content: `[MODO DEMOSTRACI√ìN] Este es un feedback gen√©rico para demostraci√≥n.\n‚Ä¢ Los puntos que mencionaremos son recomendaciones generales, no basadas en tu respuesta espec√≠fica.\n‚Ä¢ En una entrevista real, es importante estructurar tus respuestas con el m√©todo STAR (Situaci√≥n, Tarea, Acci√≥n, Resultado).\n‚Ä¢ Recomendamos incluir ejemplos concretos y cuantificables de logros anteriores.`,
    bodyLanguage: `[MODO DEMOSTRACI√ìN] Consejos generales sobre lenguaje corporal:\n‚Ä¢ Mant√©n contacto visual constante pero natural con el entrevistador.\n‚Ä¢ Evita movimientos repetitivos o nerviosos con las manos.\n‚Ä¢ Si√©ntate con la espalda recta pero manteniendo una postura relajada.\n‚Ä¢ Habla con un ritmo moderado, ni demasiado r√°pido ni demasiado lento.`,
    overall: `[MODO DEMOSTRACI√ìN] Esta es una simulaci√≥n para mostrar c√≥mo funcionar√≠a la herramienta. En una versi√≥n completa, analizar√≠amos realmente el contenido de tu video y proporcionar√≠amos feedback personalizado basado en tu respuesta espec√≠fica.`,
    score: 8,
    isDemo: true
  };
};

// Export all handlers
module.exports = {
  handleStart,
  handleHelp,
  handleAbout,
  handleStatus,
  handleDocument,
  handleCallbackQuery,
  registerUser,
  sendAnalysisResults,
  handleVideo,
  generateInterviewFeedback: generateDemoFeedback,
  getDefaultFeedback,
  sendInterviewFeedback,
  getInterviewScoreEmoji,
};
